/*
 * Channel Manager Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelmanagerChannelSettings;
import org.openapitools.client.model.ChannelmanagerChannelStatus;
import org.openapitools.client.model.ChannelmanagerChannelTypeWebsite;
import org.openapitools.client.model.ChannelmanagerLanguageCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_ChannelManager.JSON;

/**
 * ChannelmanagerUpdateChannelRequestPayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-08T08:02:08.598927156Z[Etc/UTC]")
public class ChannelmanagerUpdateChannelRequestPayload {
  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE = "defaultLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE)
  private ChannelmanagerLanguageCode defaultLanguage = ChannelmanagerLanguageCode.UNKNOWN;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private ChannelmanagerChannelSettings settings;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private ChannelmanagerChannelTypeWebsite website;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ChannelmanagerChannelStatus status = ChannelmanagerChannelStatus.UNKNOWN;

  public ChannelmanagerUpdateChannelRequestPayload() {
  }

  public ChannelmanagerUpdateChannelRequestPayload image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ChannelmanagerUpdateChannelRequestPayload name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ChannelmanagerUpdateChannelRequestPayload defaultLanguage(ChannelmanagerLanguageCode defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

   /**
   * Get defaultLanguage
   * @return defaultLanguage
  **/
  @javax.annotation.Nullable
  public ChannelmanagerLanguageCode getDefaultLanguage() {
    return defaultLanguage;
  }

  public void setDefaultLanguage(ChannelmanagerLanguageCode defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }


  public ChannelmanagerUpdateChannelRequestPayload settings(ChannelmanagerChannelSettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  public ChannelmanagerChannelSettings getSettings() {
    return settings;
  }

  public void setSettings(ChannelmanagerChannelSettings settings) {
    this.settings = settings;
  }


  public ChannelmanagerUpdateChannelRequestPayload website(ChannelmanagerChannelTypeWebsite website) {
    this.website = website;
    return this;
  }

   /**
   * Get website
   * @return website
  **/
  @javax.annotation.Nullable
  public ChannelmanagerChannelTypeWebsite getWebsite() {
    return website;
  }

  public void setWebsite(ChannelmanagerChannelTypeWebsite website) {
    this.website = website;
  }


  public ChannelmanagerUpdateChannelRequestPayload status(ChannelmanagerChannelStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public ChannelmanagerChannelStatus getStatus() {
    return status;
  }

  public void setStatus(ChannelmanagerChannelStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelmanagerUpdateChannelRequestPayload channelmanagerUpdateChannelRequestPayload = (ChannelmanagerUpdateChannelRequestPayload) o;
    return Objects.equals(this.image, channelmanagerUpdateChannelRequestPayload.image) &&
        Objects.equals(this.name, channelmanagerUpdateChannelRequestPayload.name) &&
        Objects.equals(this.defaultLanguage, channelmanagerUpdateChannelRequestPayload.defaultLanguage) &&
        Objects.equals(this.settings, channelmanagerUpdateChannelRequestPayload.settings) &&
        Objects.equals(this.website, channelmanagerUpdateChannelRequestPayload.website) &&
        Objects.equals(this.status, channelmanagerUpdateChannelRequestPayload.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, name, defaultLanguage, settings, website, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelmanagerUpdateChannelRequestPayload {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image");
    openapiFields.add("name");
    openapiFields.add("defaultLanguage");
    openapiFields.add("settings");
    openapiFields.add("website");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ChannelmanagerUpdateChannelRequestPayload
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelmanagerUpdateChannelRequestPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelmanagerUpdateChannelRequestPayload is not found in the empty JSON string", ChannelmanagerUpdateChannelRequestPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelmanagerUpdateChannelRequestPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelmanagerUpdateChannelRequestPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `defaultLanguage`
      if (jsonObj.get("defaultLanguage") != null && !jsonObj.get("defaultLanguage").isJsonNull()) {
        ChannelmanagerLanguageCode.validateJsonElement(jsonObj.get("defaultLanguage"));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        ChannelmanagerChannelSettings.validateJsonElement(jsonObj.get("settings"));
      }
      // validate the optional field `website`
      if (jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) {
        ChannelmanagerChannelTypeWebsite.validateJsonElement(jsonObj.get("website"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ChannelmanagerChannelStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelmanagerUpdateChannelRequestPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelmanagerUpdateChannelRequestPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelmanagerUpdateChannelRequestPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelmanagerUpdateChannelRequestPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelmanagerUpdateChannelRequestPayload>() {
           @Override
           public void write(JsonWriter out, ChannelmanagerUpdateChannelRequestPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelmanagerUpdateChannelRequestPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChannelmanagerUpdateChannelRequestPayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChannelmanagerUpdateChannelRequestPayload
  * @throws IOException if the JSON string is invalid with respect to ChannelmanagerUpdateChannelRequestPayload
  */
  public static ChannelmanagerUpdateChannelRequestPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelmanagerUpdateChannelRequestPayload.class);
  }

 /**
  * Convert an instance of ChannelmanagerUpdateChannelRequestPayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

