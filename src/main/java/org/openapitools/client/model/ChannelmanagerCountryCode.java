/*
 * Channel Manager Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets channelmanagerCountryCode
 */
@JsonAdapter(ChannelmanagerCountryCode.Adapter.class)
public enum ChannelmanagerCountryCode {
  
  UNKNOWN("COUNTRY_CODE_UNKNOWN"),
  
  AD("COUNTRY_CODE_AD"),
  
  AE("COUNTRY_CODE_AE"),
  
  AF("COUNTRY_CODE_AF"),
  
  AG("COUNTRY_CODE_AG"),
  
  AI("COUNTRY_CODE_AI"),
  
  AL("COUNTRY_CODE_AL"),
  
  AM("COUNTRY_CODE_AM"),
  
  AO("COUNTRY_CODE_AO"),
  
  AQ("COUNTRY_CODE_AQ"),
  
  AR("COUNTRY_CODE_AR"),
  
  AS("COUNTRY_CODE_AS"),
  
  AT("COUNTRY_CODE_AT"),
  
  AU("COUNTRY_CODE_AU"),
  
  AW("COUNTRY_CODE_AW"),
  
  AX("COUNTRY_CODE_AX"),
  
  AZ("COUNTRY_CODE_AZ"),
  
  BA("COUNTRY_CODE_BA"),
  
  BB("COUNTRY_CODE_BB"),
  
  BD("COUNTRY_CODE_BD"),
  
  BE("COUNTRY_CODE_BE"),
  
  BF("COUNTRY_CODE_BF"),
  
  BG("COUNTRY_CODE_BG"),
  
  BH("COUNTRY_CODE_BH"),
  
  BI("COUNTRY_CODE_BI"),
  
  BJ("COUNTRY_CODE_BJ"),
  
  BL("COUNTRY_CODE_BL"),
  
  BM("COUNTRY_CODE_BM"),
  
  BN("COUNTRY_CODE_BN"),
  
  BO("COUNTRY_CODE_BO"),
  
  BQ("COUNTRY_CODE_BQ"),
  
  BR("COUNTRY_CODE_BR"),
  
  BS("COUNTRY_CODE_BS"),
  
  BT("COUNTRY_CODE_BT"),
  
  BV("COUNTRY_CODE_BV"),
  
  BW("COUNTRY_CODE_BW"),
  
  BY("COUNTRY_CODE_BY"),
  
  BZ("COUNTRY_CODE_BZ"),
  
  CA("COUNTRY_CODE_CA"),
  
  CC("COUNTRY_CODE_CC"),
  
  CD("COUNTRY_CODE_CD"),
  
  CF("COUNTRY_CODE_CF"),
  
  CG("COUNTRY_CODE_CG"),
  
  CH("COUNTRY_CODE_CH"),
  
  CI("COUNTRY_CODE_CI"),
  
  CK("COUNTRY_CODE_CK"),
  
  CL("COUNTRY_CODE_CL"),
  
  CM("COUNTRY_CODE_CM"),
  
  CN("COUNTRY_CODE_CN"),
  
  CO("COUNTRY_CODE_CO"),
  
  CR("COUNTRY_CODE_CR"),
  
  CU("COUNTRY_CODE_CU"),
  
  CV("COUNTRY_CODE_CV"),
  
  CW("COUNTRY_CODE_CW"),
  
  CX("COUNTRY_CODE_CX"),
  
  CY("COUNTRY_CODE_CY"),
  
  CZ("COUNTRY_CODE_CZ"),
  
  DE("COUNTRY_CODE_DE"),
  
  DJ("COUNTRY_CODE_DJ"),
  
  DK("COUNTRY_CODE_DK"),
  
  DM("COUNTRY_CODE_DM"),
  
  DO("COUNTRY_CODE_DO"),
  
  DZ("COUNTRY_CODE_DZ"),
  
  EC("COUNTRY_CODE_EC"),
  
  EE("COUNTRY_CODE_EE"),
  
  EG("COUNTRY_CODE_EG"),
  
  EH("COUNTRY_CODE_EH"),
  
  ER("COUNTRY_CODE_ER"),
  
  ES("COUNTRY_CODE_ES"),
  
  ET("COUNTRY_CODE_ET"),
  
  FI("COUNTRY_CODE_FI"),
  
  FJ("COUNTRY_CODE_FJ"),
  
  FK("COUNTRY_CODE_FK"),
  
  FM("COUNTRY_CODE_FM"),
  
  FO("COUNTRY_CODE_FO"),
  
  FR("COUNTRY_CODE_FR"),
  
  GA("COUNTRY_CODE_GA"),
  
  GB("COUNTRY_CODE_GB"),
  
  GD("COUNTRY_CODE_GD"),
  
  GE("COUNTRY_CODE_GE"),
  
  GF("COUNTRY_CODE_GF"),
  
  GG("COUNTRY_CODE_GG"),
  
  GH("COUNTRY_CODE_GH"),
  
  GI("COUNTRY_CODE_GI"),
  
  GL("COUNTRY_CODE_GL"),
  
  GM("COUNTRY_CODE_GM"),
  
  GN("COUNTRY_CODE_GN"),
  
  GP("COUNTRY_CODE_GP"),
  
  GQ("COUNTRY_CODE_GQ"),
  
  GR("COUNTRY_CODE_GR"),
  
  GS("COUNTRY_CODE_GS"),
  
  GT("COUNTRY_CODE_GT"),
  
  GU("COUNTRY_CODE_GU"),
  
  GW("COUNTRY_CODE_GW"),
  
  GY("COUNTRY_CODE_GY"),
  
  HK("COUNTRY_CODE_HK"),
  
  HM("COUNTRY_CODE_HM"),
  
  HN("COUNTRY_CODE_HN"),
  
  HR("COUNTRY_CODE_HR"),
  
  HT("COUNTRY_CODE_HT"),
  
  HU("COUNTRY_CODE_HU"),
  
  ID("COUNTRY_CODE_ID"),
  
  IE("COUNTRY_CODE_IE"),
  
  IL("COUNTRY_CODE_IL"),
  
  IM("COUNTRY_CODE_IM"),
  
  IN("COUNTRY_CODE_IN"),
  
  IO("COUNTRY_CODE_IO"),
  
  IQ("COUNTRY_CODE_IQ"),
  
  IR("COUNTRY_CODE_IR"),
  
  IS("COUNTRY_CODE_IS"),
  
  IT("COUNTRY_CODE_IT"),
  
  JE("COUNTRY_CODE_JE"),
  
  JM("COUNTRY_CODE_JM"),
  
  JO("COUNTRY_CODE_JO"),
  
  JP("COUNTRY_CODE_JP"),
  
  KE("COUNTRY_CODE_KE"),
  
  KG("COUNTRY_CODE_KG"),
  
  KH("COUNTRY_CODE_KH"),
  
  KI("COUNTRY_CODE_KI"),
  
  KM("COUNTRY_CODE_KM"),
  
  KN("COUNTRY_CODE_KN"),
  
  KP("COUNTRY_CODE_KP"),
  
  KR("COUNTRY_CODE_KR"),
  
  KW("COUNTRY_CODE_KW"),
  
  KY("COUNTRY_CODE_KY"),
  
  KZ("COUNTRY_CODE_KZ"),
  
  LA("COUNTRY_CODE_LA"),
  
  LB("COUNTRY_CODE_LB"),
  
  LC("COUNTRY_CODE_LC"),
  
  LI("COUNTRY_CODE_LI"),
  
  LK("COUNTRY_CODE_LK"),
  
  LR("COUNTRY_CODE_LR"),
  
  LS("COUNTRY_CODE_LS"),
  
  LT("COUNTRY_CODE_LT"),
  
  LU("COUNTRY_CODE_LU"),
  
  LV("COUNTRY_CODE_LV"),
  
  LY("COUNTRY_CODE_LY"),
  
  MA("COUNTRY_CODE_MA"),
  
  MC("COUNTRY_CODE_MC"),
  
  MD("COUNTRY_CODE_MD"),
  
  ME("COUNTRY_CODE_ME"),
  
  MF("COUNTRY_CODE_MF"),
  
  MG("COUNTRY_CODE_MG"),
  
  MH("COUNTRY_CODE_MH"),
  
  MK("COUNTRY_CODE_MK"),
  
  ML("COUNTRY_CODE_ML"),
  
  MM("COUNTRY_CODE_MM"),
  
  MN("COUNTRY_CODE_MN"),
  
  MO("COUNTRY_CODE_MO"),
  
  MP("COUNTRY_CODE_MP"),
  
  MQ("COUNTRY_CODE_MQ"),
  
  MR("COUNTRY_CODE_MR"),
  
  MS("COUNTRY_CODE_MS"),
  
  MT("COUNTRY_CODE_MT"),
  
  MU("COUNTRY_CODE_MU"),
  
  MV("COUNTRY_CODE_MV"),
  
  MW("COUNTRY_CODE_MW"),
  
  MX("COUNTRY_CODE_MX"),
  
  MY("COUNTRY_CODE_MY"),
  
  MZ("COUNTRY_CODE_MZ"),
  
  NA("COUNTRY_CODE_NA"),
  
  NC("COUNTRY_CODE_NC"),
  
  NE("COUNTRY_CODE_NE"),
  
  NF("COUNTRY_CODE_NF"),
  
  NG("COUNTRY_CODE_NG"),
  
  NI("COUNTRY_CODE_NI"),
  
  NL("COUNTRY_CODE_NL"),
  
  NO("COUNTRY_CODE_NO"),
  
  NP("COUNTRY_CODE_NP"),
  
  NR("COUNTRY_CODE_NR"),
  
  NU("COUNTRY_CODE_NU"),
  
  NZ("COUNTRY_CODE_NZ"),
  
  OM("COUNTRY_CODE_OM"),
  
  PA("COUNTRY_CODE_PA"),
  
  PE("COUNTRY_CODE_PE"),
  
  PF("COUNTRY_CODE_PF"),
  
  PG("COUNTRY_CODE_PG"),
  
  PH("COUNTRY_CODE_PH"),
  
  PK("COUNTRY_CODE_PK"),
  
  PL("COUNTRY_CODE_PL"),
  
  PM("COUNTRY_CODE_PM"),
  
  PN("COUNTRY_CODE_PN"),
  
  PR("COUNTRY_CODE_PR"),
  
  PS("COUNTRY_CODE_PS"),
  
  PT("COUNTRY_CODE_PT"),
  
  PW("COUNTRY_CODE_PW"),
  
  PY("COUNTRY_CODE_PY"),
  
  QA("COUNTRY_CODE_QA"),
  
  RE("COUNTRY_CODE_RE"),
  
  RO("COUNTRY_CODE_RO"),
  
  RS("COUNTRY_CODE_RS"),
  
  RU("COUNTRY_CODE_RU"),
  
  RW("COUNTRY_CODE_RW"),
  
  SA("COUNTRY_CODE_SA"),
  
  SB("COUNTRY_CODE_SB"),
  
  SC("COUNTRY_CODE_SC"),
  
  SD("COUNTRY_CODE_SD"),
  
  SE("COUNTRY_CODE_SE"),
  
  SG("COUNTRY_CODE_SG"),
  
  SH("COUNTRY_CODE_SH"),
  
  SI("COUNTRY_CODE_SI"),
  
  SJ("COUNTRY_CODE_SJ"),
  
  SK("COUNTRY_CODE_SK"),
  
  SL("COUNTRY_CODE_SL"),
  
  SM("COUNTRY_CODE_SM"),
  
  SN("COUNTRY_CODE_SN"),
  
  SO("COUNTRY_CODE_SO"),
  
  SR("COUNTRY_CODE_SR"),
  
  SS("COUNTRY_CODE_SS"),
  
  ST("COUNTRY_CODE_ST"),
  
  SV("COUNTRY_CODE_SV"),
  
  SX("COUNTRY_CODE_SX"),
  
  SY("COUNTRY_CODE_SY"),
  
  SZ("COUNTRY_CODE_SZ"),
  
  TC("COUNTRY_CODE_TC"),
  
  TD("COUNTRY_CODE_TD"),
  
  TF("COUNTRY_CODE_TF"),
  
  TG("COUNTRY_CODE_TG"),
  
  TH("COUNTRY_CODE_TH"),
  
  TJ("COUNTRY_CODE_TJ"),
  
  TK("COUNTRY_CODE_TK"),
  
  TL("COUNTRY_CODE_TL"),
  
  TM("COUNTRY_CODE_TM"),
  
  TN("COUNTRY_CODE_TN"),
  
  TO("COUNTRY_CODE_TO"),
  
  TR("COUNTRY_CODE_TR"),
  
  TT("COUNTRY_CODE_TT"),
  
  TV("COUNTRY_CODE_TV"),
  
  TW("COUNTRY_CODE_TW"),
  
  TZ("COUNTRY_CODE_TZ"),
  
  UA("COUNTRY_CODE_UA"),
  
  UG("COUNTRY_CODE_UG"),
  
  UM("COUNTRY_CODE_UM"),
  
  US("COUNTRY_CODE_US"),
  
  UY("COUNTRY_CODE_UY"),
  
  UZ("COUNTRY_CODE_UZ"),
  
  VA("COUNTRY_CODE_VA"),
  
  VC("COUNTRY_CODE_VC"),
  
  VE("COUNTRY_CODE_VE"),
  
  VG("COUNTRY_CODE_VG"),
  
  VI("COUNTRY_CODE_VI"),
  
  VN("COUNTRY_CODE_VN"),
  
  VU("COUNTRY_CODE_VU"),
  
  WF("COUNTRY_CODE_WF"),
  
  WS("COUNTRY_CODE_WS"),
  
  YE("COUNTRY_CODE_YE"),
  
  YT("COUNTRY_CODE_YT"),
  
  ZA("COUNTRY_CODE_ZA"),
  
  ZM("COUNTRY_CODE_ZM"),
  
  ZW("COUNTRY_CODE_ZW"),
  
  XK("COUNTRY_CODE_XK");

  private String value;

  ChannelmanagerCountryCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ChannelmanagerCountryCode fromValue(String value) {
    for (ChannelmanagerCountryCode b : ChannelmanagerCountryCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ChannelmanagerCountryCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final ChannelmanagerCountryCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ChannelmanagerCountryCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ChannelmanagerCountryCode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ChannelmanagerCountryCode.fromValue(value);
  }
}

